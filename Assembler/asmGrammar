-- Hack ASM Grammar ----------------------------------------------------------------

statement                       -> labelStatement | basicStatement | immediateStatementV1 | immediateStatementV2 | singleRegisterStatement | standaloneStatement

labelStatement                  -> '::' label

basicStatement                  -> opVanilla rX rY

immediateStatementV1            -> opVanilla rX immediate

immediateStatementV2            -> opJump|SWI immediate

singleRegisterStatement         -> opJump|LXH rX

standaloneStatement             -> opStandalone

opVanilla                       -> STO|LD|LPM|MOV|ADD|ADC|SUB|SBB|AND|OR|XOR|LSR|LSL|MUL|DIV|NOT|NEG|CMP|IORD|IOWR|IODR

opJump                          -> JMP|JEQ|JNE|JGT|JGE|JLT|JLE|JSR

opStandalone                    -> RTS|RTI|HLT|NOP

rX, rY                          -> r[0..15] | 'rStatus'

immediate                       -> label | 32bit_integerConstant

label                           -> sequence of letters, digits, and underscore not starting with a digit

integerConstant                 -> decConstant | hexConstant | binConstant | charConstant

decConstant                     -> [0..9]+

hexConstant                     -> ( '0x' | '0X' ) ( [0..9] | [a..f] | [A..F] )+

binConstant                     -> ( '0b' | '0B' ) ( 0 | 1 )+

charConstant                    -> single ASCII character wrapped in single quotes

stringASCII                     -> sequence of ASCII characters wrapped in double quotes

startOfComment                  -> '//'


-- Directives ----------------------------------------------------------------------

EQU_directive                   -> 'EQU' alias realValue

DBYTE_directive                 -> 'DBYTE'    8bit_integerConstant | stringASCII ( ','  8bit_integerConstant | stringASCII )*
DHALF_directive                 -> 'DHALF'   16bit_integerConstant               ( ',' 16bit_integerConstant )*
DWORD_directive                 -> 'DWORD'   32bit_integerConstant               ( ',' 32bit_integerConstant )*
DDOUBLE_directive               -> 'DDOUBLE' 64bit_integerConstant               ( ',' 64bit_integerConstant )*

MACRO_directive                 -> 'MACRO' label '(' MACROParameters ')' MACROBody 'ENDMACRO'

MACROParameters                 -> ( label ( ',' label )* )?

MACROBody                       -> statement?

MACROArguments                  -> ( label|integerConstant ( ',' label|integerConstant )* )?

MACROCall                       -> label MACROArguments



TODO:
	. update all test code accordingly
		. replace r0 with 0
		. 