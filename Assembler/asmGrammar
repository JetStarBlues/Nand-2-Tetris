-- Hack ASM Grammar ----------------------------------------------------------------

statement                       -> basicStatement | immediateAddressStatementV1 | immediateAddressStatementV2 | registerPairAddressStatementV1 | registerPairAddressStatementV2 | labelStatement | standaloneStatement

basicStatement                  -> opVanilla rX rY immediate?

immediateAddressStatementV1     -> opExtMemoryAccess rX '{' address '}'

immediateAddressStatementV2     -> opJump '{' address '}'

registerPairAddressStatementV1  -> opExtMemoryAccess rX registerPair

registerPairAddressStatementV2  -> opJump|LXH registerPair

labelStatement                  -> '(' label ')'

standaloneStatement             -> opStandalone

opVanilla                       -> opExtMemoryAccess|opJump|MOV|ADD|SUB|AND|OR|XOR|LSR|LSL|MUL|DIV|NOT|NEG|SWI|RTI|IORD|IOWR|IODR

opExtMemoryAccess               -> STO|LD|LPM

opJump                          -> JMP|JZ|JNZ|JC|JNC|JNG|JZP|JSR

opStandalone                    -> RTS|HLT|NOP

rX, rY                          -> r[0..15] | 'rStatus'

registerPair                    -> r[0..15]r[0..15]
                                 Together form a 32bit value { rHigh, rLow }

immediate                       -> 16bit integerConstant

address                         -> label | 32bit integerConstant

label                           -> sequence of letters, digits, and underscore not starting with a digit

integerConstant                 -> decConstant | hexConstant | binConstant | charConstant

decConstant                     -> ( 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 )+

hexConstant                     -> ( '0x' | '0X' ) ( 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | A | B | C | D | E | F )+

binConstant                     -> ( '0b' | '0B' ) ( 0 | 1 )+

charConstant                    -> single Ascii character wrapped in single quotes


//TODO

EQU_directive                   -> label EQU integerConstant
                                   EQU label integerConstant  <- pick one of two styles

ORG_directive                   -> ORG '{' address '}'

MACRO_directive                 -> 'MACRO' '(' MACROParameters ')' MACROBody 'ENDMACRO'

MACROParameters                 -> ( label (, label)* )*

MACROBody                       -> statement*
