class Main {

	function void main () {

		// Font.changeFont( 1 );

		customTest1();
		// customTest2();
		// tecsTest();
	}

	function void customTest1 () {

		var Array ov;
		var int RAM, heapEnd;
		var int unallocHeap;

		// Test overflow ---

		// ov = Array.new( 32767 );  // Should trigger too large error

		RAM = 0;
		heapEnd = GlobalConstants.getHeapEnd();
		RAM[ heapEnd - 1 ] = 9999;  // heapEnd - 1
		RAM[ heapEnd - 2 ] = 9998;  // heanEnd - 2
		RAM[ heapEnd - 3 ] = 9997;  // heanEnd - 3
		RAM[ heapEnd - 4 ] = 9996;  // heanEnd - 4

		// ov = Array.new( 32762 );  // Should trigger heap overflow error

		unallocHeap = 12816;                    // size of unallocated heap (after Sys.init)
		// ov = Array.new( unallocHeap + 30 );  // should trigger overflow error
		ov = Array.new( unallocHeap - 3 );
		ov = Array.new( 1 );                    // should trigger overflow error
	}

	function void customTest2 () {

		var Array a, b, c, d, e;
		var int t1, t2;

		// Test block merging ---
		a = Array.new( 3 );
		b = Array.new( 4 );
		c = Array.new( 4 );
		d = Array.new( 5 );
		t1 = b;
		t2 = c;
		b.dispose();
		c.dispose();
		e = Array.new( 8 );

		GFX.printString( "a -> " ); GFX.printInt(  a ); GFX.println();
		GFX.printString( "b -> " ); GFX.printInt( t1 ); GFX.println();  // old b
		GFX.printString( "c -> " ); GFX.printInt( t2 ); GFX.println();  // old c
		GFX.printString( "d -> " ); GFX.printInt(  d ); GFX.println();
		GFX.printString( "e -> " ); GFX.printInt(  e ); GFX.println();   // should be b  (i.e b & c should merge )

		a.dispose();
		b.dispose();
		c.dispose();
		d.dispose();
		e.dispose();
	}

	function void tecsTest () {

		var int temp;
		var Array a, b, c;

		//
		do DataMemory.poke(8000, 333);        // RAM[8000] = 333
		let temp = DataMemory.peek(8000);
		do DataMemory.poke(8001, temp + 1);   // RAM[8001] = 334

		let a = Array.new(3);
		let a[2] = 222;
		do DataMemory.poke(8002, a[2]);       // RAM[8002] = 222

		let b = Array.new(5);
		let b[1] = a[2] - 100;
		do DataMemory.poke(8003, b[1]);       // RAM[8003] = 122

		let c = Array.new(500);
		let c[499] = a[2] - b[1];
		do DataMemory.poke(8004, c[499]);     // RAM[8004] = 100

		do a.dispose();
		do b.dispose();

		let b = Array.new(4);

		let b[0] = c[499] - 90;
		do DataMemory.poke(8005, b[0]);       // RAM[8005] = 10

		do c.dispose();
		do b.dispose();

		// Debug
		GFX.printInt( DataMemory.peek( 8000 ) ); GFX.println();
		GFX.printInt( DataMemory.peek( 8001 ) ); GFX.println();
		GFX.printInt( DataMemory.peek( 8002 ) ); GFX.println();
		GFX.printInt( DataMemory.peek( 8003 ) ); GFX.println();
		GFX.printInt( DataMemory.peek( 8004 ) ); GFX.println();
		GFX.printInt( DataMemory.peek( 8005 ) ); GFX.println();

		return;
	}

}