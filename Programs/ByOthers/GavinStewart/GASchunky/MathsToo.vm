function MathsToo.lsl 0
label WHILE_COND1
push argument 1
push constant 0
gt
if-goto WHILE_BODY1
goto WHILE_END1
label WHILE_BODY1
push argument 0
push argument 0
add
pop argument 0
push argument 1
push constant 1
sub
pop argument 1
goto WHILE_COND1
label WHILE_END1
push argument 0
return
function MathsToo.lsr 4
push constant 1
pop local 0
push argument 1
push constant 1
sub
pop argument 1
label WHILE_COND2
push argument 1
push constant 0
gt
if-goto WHILE_BODY2
goto WHILE_END2
label WHILE_BODY2
push local 0
push local 0
add
pop local 0
push argument 1
push constant 1
sub
pop argument 1
goto WHILE_COND2
label WHILE_END2
push constant 32767
neg
push constant 1
sub
pop local 1
push constant 1
pop local 2
label WHILE_COND3
push local 0
push local 1
eq
not
if-goto WHILE_BODY3
goto WHILE_END3
label WHILE_BODY3
push local 0
push local 0
add
pop local 0
push argument 0
push local 0
and
if-goto IF_THEN1
goto IF_END1
label IF_THEN1
push local 3
push local 2
or
pop local 3
label IF_END1
push local 2
push local 2
add
pop local 2
goto WHILE_COND3
label WHILE_END3
push local 3
return
function MathsToo.mod 1
push argument 0
push argument 1
call Math.divide 2
pop local 0
push argument 0
push argument 1
push local 0
call Math.multiply 2
sub
return
