/**
 * Static Image factory class.
 *
 * Requires Image.jack
 *
 * Generated from "ball05.pbm" by pbm2jack.py
 *
 * Copyright 2013-2016 Gavin Stewart.
 *
 * You are required to give attribution to the author (Gavin Stewart) for any
 * use of this program (GPLv3 Section 7b).
 * 
 * Trying to pass off my code as your own in your Elements of Computing classes
 * will result in a cursed life of forever buggy software.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
class ball05 {

    /**
     * newImage - returns an Image object containing bitmap data.
     */
    function Image newImage () {
        var Image i;
        var int width, height;

        let width = 5;
        let height = 60;

        let i = Image.newBitmap(width, height);

        // do i.push(0,0,240,0,0,0,0,0,0,0,0,0,-1922,3,0,0);
        // do i.push(-32767-1,-513,3,0,0,-8192,-7937,65,0,0,-4096,-32705,129,0,0,-1024);
        // do i.push(31,898,0,0,-496,15,1823,0,0,-136,7,3967,0,0,-1924,-32761);
        // do i.push(7423,0,0,-16322,-32765,511,0,0,31,-32767,16895,0,0,15,-16377,-32257);
        // do i.push(0,-32767-1,7,-16321,-32257,1,-16384,-32761,-16129,511,3,-16384,-16381,-6145,511,3);
        // do i.push(-8192,-16381,-8193,511,6,-8192,-8191,8191,510,6,-4096,-8191,4095,496,14,-4096);
        // do i.push(-4096,4095,448,12,-16384,-4096,4095,0,12,-32767-1,-2048,2047,3584,28,-32767-1,-2041);
        // do i.push(2047,15872,28,-32767-1,-961,1023,-512,29,-16384,-769,1023,-512,19,-16384,-1025,1023);
        // do i.push(-512,3,-16384,-15873,511,-512,3,-16384,511,510,-256,7,-16384,511,504,-256);
        // do i.push(3,-16384,255,192,-256,3,-16384,255,256,-256,3,-16384,255,3968,-128,3);
        // do i.push(-8192,255,16256,-128,3,-16384,127,-128,-127,3,-16384,127,-64,-113,3,-16384);
        // do i.push(127,-64,-65,3,-2048,127,-64,-449,1,14336,126,-32,-4065,1,14336,120);
        // do i.push(-32,-32737,1,14336,0,-32,15,3,12288,384,-16,15,15,28672,1920,-16);
        // do i.push(15,15,24576,16256,-16,-32761,15,24576,-128,-7,-32765,7,-16384,-128,-9,-16381);
        // do i.push(3,-16384,-128,-125,-8191,3,-32767-1,-127,-509,-8191,1,0,-127,-4093,-4096,1);
        // do i.push(0,-125,1,-2048,0,0,-128,-32767,31745,0,0,-232,-16383,15375,0,0);
        // do i.push(-16,-8192,7807,0,0,-800,-4096,3327,0,0,25024,-2048,63,0,0,-32384);
        // do i.push(-1024,31,0,0,-32256,-505,15,0,0,-15360,-65,3,0,0,-16384,-193);
        // do i.push(0,0,0,-16384,6147,0,0,0,0,7936,0,0,0,0,0,0);

        i.push(0, 0, 3840, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32287, -16384, 0, 0);
        i.push(1, -65, -16384, 0, 0, 7, -249, -32256, 0, 0, 15, -1023, -32512, 0, 0, 63);
        i.push(-2048, 16832, 0, 0, 2175, -4096, -1824, 0, 0, 7935, -8192, -272, 0, 0, 15903, -8191);
        i.push(-200, 0, 0, 31747, -16383, -128, 0, 0, -2048, -32767, -126, 0, 0, -4096, -8189, -127);
        i.push(0, 1, -8192, -1021, -127, !32767, 3, -8191, -253, -128, -16384, 3, -16381, -25, -128, -16384);
        i.push(7, -16381, -5, -128, 24576, 7, -32761, -8, 32640, 24576, 15, -32761, -16, 3968, 28672, 15);
        i.push(15, -16, 896, 12288, 3, 15, -16, 0, 12288, 1, 31, -32, 112, 14336, 1, -8161);
        i.push(-32, 124, 14336, 1, -961, -64, 127, -18432, 3, -193, -64, 127, -14336, 3, -33, -64);
        i.push(127, -16384, 3, -125, -128, 127, -16384, 3, -128, 32640, 255, -8192, 3, -128, 8064, 255);
        i.push(-16384, 3, -256, 768, 255, -16384, 3, -256, 128, 255, -16384, 3, -256, 496, 511, -16384);
        i.push(7, -256, 508, 511, -16384, 3, -512, 511, -32257, -16384, 3, -512, 1023, -3585, -16384, 3);
        i.push(-512, 1023, -513, -16384, 31, -512, 1023, -897, !32767, 28, 32256, 2047, -2033, !32767, 28, 7680);
        i.push(2047, -2047, !32767, 28, 0, 2047, -4096, -16384, 12, 384, 4095, -4096, -4096, 14, 480, 4095);
        i.push(-4096, -4096, 6, 508, 4095, -8191, -4096, 6, 511, -24577, -16383, -8192, 3, 511, -4097, -16381);
        i.push(-16384, 3, 511, -15873, -32761, -16384, 1, -32257, -16257, -32761, !32767, 0, -32257, -16369, 15, !32767);
        i.push(0, -15873, !32767, 31, 0, 0, 511, -32767, -32706, 0, 0, 6399, -32765, -4036, 0, 0);
        i.push(4095, 7, -392, 0, 0, 1855, 15, -208, 0, 0, 902, 31, -1024, 0, 0, 385);
        i.push(63, -2048, 0, 0, 65, -8065, -4096, 0, 0, 35, -513, -16384, 0, 0, 3, -769);
        i.push(0, 0, 0, 3, -16360, 0, 0, 0, 0, 248, 0, 0, 0, 0, 0, 0);

        return i;
    }
}
