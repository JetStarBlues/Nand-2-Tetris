/**
 * Static Image factory class.
 *
 * Requires Image.jack
 *
 * Generated from "ball08.pbm" by pbm2jack.py
 *
 * Copyright 2013-2016 Gavin Stewart.
 *
 * You are required to give attribution to the author (Gavin Stewart) for any
 * use of this program (GPLv3 Section 7b).
 * 
 * Trying to pass off my code as your own in your Elements of Computing classes
 * will result in a cursed life of forever buggy software.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
class ball08 {

    /**
     * newImage - returns an Image object containing bitmap data.
     */
    function Image newImage () {
        var Image i;
        var int width, height;

        let width = 5;
        let height = 60;

        let i = Image.newBitmap(width, height);

        // do i.push(0,0,0,0,0,0,0,-3104,127,0,0,0,-7688,7,0,0);
        // do i.push(0,126,1539,0,0,-32767-1,31,3586,0,0,-8192,-32753,7711,0,0,-4096);
        // do i.push(-32765,16127,0,0,-4096,-16383,31231,0,0,-16384,-8192,24831,4,0,-32767-1,-4095);
        // do i.push(255,8,0,-16384,-2033,255,23,0,-8192,-1985,255,30,0,-8192,-513,255);
        // do i.push(30,0,-4096,-3585,127,62,0,-2048,-15873,127,62,0,-2048,255,126,124);
        // do i.push(0,-1024,127,112,252,0,-1024,127,0,252,0,-512,63,960,252,0);
        // do i.push(-512,63,4032,508,0,-252,31,32736,508,0,-194,31,-32,511,0,-386);
        // do i.push(31,-32,499,0,-3970,15,-16,899,0,-32642,15,-16,3,0,62,6);
        // do i.push(-16,3075,0,63,8,-16,3075,0,63,120,-8,3075,0,63,508,-8);
        // do i.push(3073,0,63,4092,-4,3073,0,31,32764,-4,3073,0,31,-2,-1,3073);
        // do i.push(0,31,-2,-31,3072,0,31,-2,-127,3072,0,30,-2,-1023,3072,0);
        // do i.push(30,-1,-8192,3584,0,16,-1,0,1536,0,64,32767,-32767-1,1539,0,448);
        // do i.push(32767,-32767-1,1567,0,4032,32767,-16384,2047,0,-64,16383,-16384,255,0,32704,16380);
        // do i.push(-8192,255,0,32704,8160,-8192,127,0,32640,8064,-4096,63,0,32640,3072,-2048);
        // do i.push(63,0,32640,4096,-2048,31,0,32512,28672,-1024,31,0,32512,-2048,-1021,15);
        // do i.push(0,32256,-2048,-481,7,0,32384,-1024,-129,3,0,31488,-1024,-897,3,0);
        // do i.push(17920,-512,-8129,0,0,1024,-512,-32737,0,0,2048,-249,-16369,1,0,0);
        // do i.push(-65,-8185,0,0,16384,-386,12291,0,0,0,-4036,3072,0,0,0,16412);
        // do i.push(768,0,0,0,-4096,225,0,0,0,-1024,1,0,0,0,0,0);

        i.push(0, 0, 0, 0, 0, 0, 0, 1999, -512, 0, 0, 0, 8071, -8192, 0, 0);
        i.push(0, 32256, -16288, 0, 0, 1, -2048, 16496, 0, 0, 7, -4095, -1928, 0, 0, 15);
        i.push(-16383, -132, 0, 0, 15, -32765, -98, 0, 0, 3, 7, -250, 8192, 0, 1, -32753);
        i.push(-256, 4096, 0, 3, -4065, -256, -6144, 0, 7, -993, -256, 30720, 0, 7, -65, -256);
        i.push(30720, 0, 15, -113, -512, 31744, 0, 31, -125, -512, 31744, 0, 31, -256, 32256, 15872);
        i.push(0, 63, -512, 3584, 16128, 0, 63, -512, 0, 16128, 0, 127, -1024, 960, 16128, 0);
        i.push(127, -1024, 1008, 16256, 0, 8447, -2048, 2046, 16256, 0, 31999, -2048, 2047, -128, 0, 32383);
        i.push(-2048, 2047, -12416, 0, 32271, -4096, 4095, -15936, 0, 32257, -4096, 4095, -16384, 0, 31744, 24576);
        i.push(4095, -16336, 0, -1024, 4096, 4095, -16336, 0, -1024, 7680, 8191, -16336, 0, -1024, 16256, 8191);
        i.push(-32720, 0, -1024, 16368, 16383, -32720, 0, -2048, 16382, 16383, -32720, 0, -2048, 32767, -1, -32720);
        i.push(0, -2048, 32767, -30721, 48, 0, -2048, 32767, -32257, 48, 0, 30720, 32767, -32705, 48, 0);
        i.push(30720, -1, 7, 112, 0, 2048, -1, 0, 96, 0, 512, -2, 1, -16288, 0, 896);
        i.push(-2, 1, -1952, 0, 1008, -2, 3, -32, 0, 1023, -4, 3, -256, 0, 1022, 16380);
        i.push(7, -256, 0, 1022, 2040, 7, -512, 0, 510, 504, 15, -1024, 0, 510, 48, 31);
        i.push(-1024, 0, 510, 8, 31, -2048, 0, 254, 14, 63, -2048, 0, 254, 31, -16321, -4096);
        i.push(0, 126, 31, -1921, -8192, 0, 382, 63, -257, -16384, 0, 222, 63, -449, -16384, 0);
        i.push(98, 127, -1017, 0, 0, 32, 127, -2047, 0, 0, 16, -7937, -4093, !32767, 0, 0);
        i.push(-513, -8185, 0, 0, 2, 32383, -16372, 0, 0, 0, 15375, 48, 0, 0, 0, 14338);
        i.push(192, 0, 0, 0, 15, -30976, 0, 0, 0, 63, !32767, 0, 0, 0, 0, 0);

        return i;
    }
}
