/**
 * Static Image factory class.
 *
 * Requires Image.jack
 *
 * Generated from "ball07.pbm" by pbm2jack.py
 *
 * Copyright 2013-2016 Gavin Stewart.
 *
 * You are required to give attribution to the author (Gavin Stewart) for any
 * use of this program (GPLv3 Section 7b).
 * 
 * Trying to pass off my code as your own in your Elements of Computing classes
 * will result in a cursed life of forever buggy software.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
class ball07 {

    /**
     * newImage - returns an Image object containing bitmap data.
     */
    function Image newImage () {
        var Image i;
        var int width, height;

        let width = 5;
        let height = 60;

        let i = Image.newBitmap(width, height);

        // do i.push(0,0,0,0,0,0,0,-7952,15,0,0,0,-1028,15,0,0);
        // do i.push(0,-16129,259,0,0,-16384,63,1792,0,0,-4096,31,3847,0,0,-2048);
        // do i.push(7,7999,0,0,-768,-32765,16383,0,0,-3968,-16383,14847,0,0,-32704,-8192);
        // do i.push(16895,0,0,-32736,-8189,255,1,0,-16368,-4081,255,7,0,-8176,-1921,255);
        // do i.push(15,0,-8184,-1025,255,14,0,-4092,-3073,255,30,0,-4092,-31745,255,62);
        // do i.push(0,-2046,511,252,60,0,-1022,511,224,124,0,-1023,255,0,124,0);
        // do i.push(-511,255,896,124,0,-511,127,8064,252,0,-241,127,-128,252,0,-129);
        // do i.push(127,-128,255,0,-769,63,-64,487,-32767-1,-8065,63,-64,263,-32767-1,-32641,31);
        // do i.push(-64,515,-32767-1,127,28,-32,515,-32767-1,127,0,-32,515,-32767-1,63,112,-32);
        // do i.push(515,-32767-1,63,1008,-32,515,-32767-1,63,8176,-16,515,-32767-1,63,-8,-16,515);
        // do i.push(-32767-1,63,-8,-5,513,-32767-1,63,-8,-25,513,-32767-1,31,-4,-249,513,-32767-1);
        // do i.push(31,-4,-2045,513,0,28,-4,-8189,0,-32767-1,0,-4,1,256,-32767-1,64);
        // do i.push(-2,1,263,-32767-1,960,-2,-32767,319,0,8128,-2,-32767-1,127,0,32705,-2);
        // do i.push(-16384,127,0,-64,32760,-16384,63,0,-62,32736,-8192,63,0,-128,16128,-8192);
        // do i.push(31,0,-124,14336,-4096,31,0,-128,8192,-2048,15,0,-128,-8192,-2048,7);
        // do i.push(0,-240,-4096,-1017,7,0,32512,-2048,-481,3,0,32704,-2048,-257,1,0);
        // do i.push(29056,-1024,-1921,0,0,17152,-1024,16447,0,0,1024,-511,16415,0,0,2048);
        // do i.push(-241,12303,0,0,4096,-65,2051,0,0,0,-961,513,0,0,0,28702);
        // do i.push(0,0,0,0,28672,32,0,0,0,-256,0,0,0,0,0,0);

        i.push(0, 0, 0, 0, 0, 0, 0, 3847, -4096, 0, 0, 0, 16351, -4096, 0, 0);
        i.push(0, -253, -16256, 0, 0, 3, -1024, 224, 0, 0, 15, -2048, -7952, 0, 0, 31);
        i.push(-8192, -776, 0, 0, 191, -16383, -4, 0, 0, 271, -32765, -100, 0, 0, 513, 7);
        i.push(-126, 0, 0, 1025, -16377, -256, !32767, 0, 2051, -4081, -256, -8192, 0, 2055, -481, -256);
        i.push(-4096, 0, 4103, -33, -256, 28672, 0, 8207, -49, -256, 30720, 0, 8207, -63, -256, 31744);
        i.push(0, 16415, -128, 16128, 15360, 0, 16447, -128, 1792, 15872, 0, -32705, -256, 0, 15872, 0);
        i.push(-32641, -256, 448, 15872, 0, -32641, -512, 504, 16128, 0, -3841, -512, 511, 16128, 0, -257);
        i.push(-512, 511, -256, 0, -193, -1024, 1023, -6272, 1, -505, -1024, 1023, -8064, 1, -511, -2048);
        i.push(1023, -16320, 1, -512, 14336, 2047, -16320, 1, -512, 0, 2047, -16320, 1, -1024, 3584, 2047);
        i.push(-16320, 1, -1024, 4032, 2047, -16320, 1, -1024, 4088, 4095, -16320, 1, -1024, 8191, 4095, -16320);
        i.push(1, -1024, 8191, -8193, -32704, 1, -1024, 8191, -6145, -32704, 1, -2048, 16383, -7937, -32704, 1);
        i.push(-2048, 16383, -16353, -32704, 0, 14336, 16383, -16377, 0, 1, 0, 16383, !32767, 128, 1, 512);
        i.push(32767, !32767, -8064, 1, 960, 32767, -32767, -896, 0, 1016, 32767, 1, -512, 0, -31746, 32767);
        i.push(3, -512, 0, 1023, 8190, 3, -1024, 0, 17407, 2046, 7, -1024, 0, 511, 252, 7);
        i.push(-2048, 0, 8703, 28, 15, -2048, 0, 511, 4, 31, -4096, 0, 511, 7, 31, -8192);
        i.push(0, 2303, 15, -8129, -8192, 0, 254, 31, -1921, -16384, 0, 1022, 31, -129, !32767, 0);
        i.push(398, 63, -481, 0, 0, 194, 63, -1022, 0, 0, 32, -32641, -2046, 0, 0, 16);
        i.push(-3841, -4084, 0, 0, 8, -513, -16368, 0, 0, 0, -961, -32704, 0, 0, 0, 30734);
        i.push(0, 0, 0, 0, 14, 1024, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0);

        return i;
    }
}
