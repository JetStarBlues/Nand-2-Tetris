/**
 * Static Image factory class.
 *
 * Requires Image.jack
 *
 * Generated from "ball06.pbm" by pbm2jack.py
 *
 * Copyright 2013-2016 Gavin Stewart.
 *
 * You are required to give attribution to the author (Gavin Stewart) for any
 * use of this program (GPLv3 Section 7b).
 * 
 * Trying to pass off my code as your own in your Elements of Computing classes
 * will result in a cursed life of forever buggy software.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
class ball06 {

    /**
     * newImage - returns an Image object containing bitmap data.
     */
    function Image newImage () {
        var Image i;
        var int width, height;

        let width = 5;
        let height = 60;

        let i = Image.newBitmap(width, height);

        // do i.push(0,0,0,0,0,0,0,-16336,3,0,0,0,-1538,7,0,0);
        // do i.push(-32767-1,-3585,67,0,0,-8192,-32641,385,0,0,-4096,31,768,0,0,-1024);
        // do i.push(15,1807,0,0,-448,7,3967,0,0,-800,-32765,8191,0,0,-8080,-32767);
        // do i.push(12799,0,0,56,-16384,511,0,0,28,-16381,-32257,1,0,-32756,-8161,511);
        // do i.push(3,0,-16378,-7937,511,7,0,-8185,-3073,511,6,0,-8189,-4097,511,14);
        // do i.push(-32767-1,-4093,2047,511,30,-32767-1,-4095,2047,504,28,-16384,-2047,1023,448,60,-16384);
        // do i.push(-2048,1023,0,60,0,-1024,511,1792,60,0,-1021,511,16128,124,-32767-1,-481);
        // do i.push(511,-256,120,-32767-1,-257,255,-256,127,-32767-1,-1793,255,-256,71,-16384,-7937,255);
        // do i.push(-128,7,-16384,255,127,-128,7,-16384,255,120,-128,7,-16384,127,32,-128);
        // do i.push(7,-16384,127,192,-64,3,-16384,127,1984,-64,3,-16384,127,16352,-64,3);
        // do i.push(-16384,63,-32,-64,3,-16384,63,-32,-25,3,-16384,63,-16,-33,3,-16384);
        // do i.push(63,-16,-497,1,8192,63,-16,-2033,1,8192,56,-8,-16369,1,24576,32);
        // do i.push(-8,7,0,24576,192,-8,7,15,16384,1984,-8,3,63,-16384,8128,-4);
        // do i.push(-32765,63,-32767-1,-64,-4,-32767,31,-32767-1,-64,-5,-16383,31,0,-63,-63,-16384);
        // do i.push(15,0,-127,-511,-8192,15,0,-126,30721,-4096,7,0,-126,1,-4096,3);
        // do i.push(0,-124,-16384,-2047,3,0,-256,-8192,-1017,1,0,-160,-4096,-449,0,0);
        // do i.push(-576,-4096,32511,0,0,-3712,-2048,12415,0,0,768,-1024,63,0,0,-31232);
        // do i.push(-509,31,0,0,-31744,-225,7,0,0,-32767-1,-193,1,0,0,-32767-1,31775);
        // do i.push(0,0,0,0,4097,0,0,0,0,32640,0,0,0,0,0,0);

        i.push(0, 0, 0, 0, 0, 0, 0, 3075, -16384, 0, 0, 0, 32671, -8192, 0, 0);
        i.push(1, -113, -15872, 0, 0, 7, -511, -32384, 0, 0, 15, -2048, 192, 0, 0, 63);
        i.push(-4096, -3872, 0, 0, 639, -8192, -272, 0, 0, 1855, -16383, -8, 0, 0, 3591, -32767);
        i.push(-116, 0, 0, 7168, 3, -128, 0, 0, 14336, -16381, -127, !32767, 0, 12289, -2041, -128);
        i.push(-16384, 0, 24579, -249, -128, -8192, 0, -8185, -49, -128, 24576, 0, -16377, -9, -128, 28672);
        i.push(1, -16369, -32, -128, 30720, 1, -32753, -32, 8064, 14336, 3, -32737, -64, 896, 15360, 3);
        i.push(31, -64, 0, 15360, 0, 63, -128, 224, 15360, 0, -16321, -128, 252, 15872, 1, -1921);
        i.push(-128, 255, 7680, 1, -129, -256, 255, -512, 1, -225, -256, 255, -7680, 3, -249, -256);
        i.push(511, -8192, 3, -256, -512, 511, -8192, 3, -256, 7680, 511, -8192, 3, -512, 1024, 511);
        i.push(-8192, 3, -512, 768, 1023, -16384, 3, -512, 992, 1023, -16384, 3, -512, 2044, 1023, -16384);
        i.push(3, -1024, 2047, 1023, -16384, 3, -1024, 2047, -6145, -16384, 3, -1024, 4095, -1025, -16384, 3);
        i.push(-1024, 4095, -3969, !32767, 4, -1024, 4095, -4065, !32767, 4, 7168, 8191, -4093, !32767, 6, 1024);
        i.push(8191, -8192, 0, 6, 768, 8191, -8192, -4096, 2, 992, 8191, -16384, -1024, 3, 1016, 16383);
        i.push(-16383, -1024, 1, 1023, 16383, -32767, -2048, 1, 1023, -8193, -32765, -2048, 0, -31745, -31745, 3);
        i.push(-4096, 0, -32257, -32641, 7, -4096, 0, 16895, -32738, 15, -8192, 0, 16895, !32767, 15, -16384);
        i.push(0, 8703, 3, -32737, -16384, 0, 255, 7, -8129, !32767, 0, 1791, 15, -897, 0, 0);
        i.push(959, 15, -130, 0, 0, 399, 31, -500, 0, 0, 192, 63, -1024, 0, 0, 97);
        i.push(-16257, -2048, 0, 0, 33, -1793, -8192, 0, 0, 1, -769, !32767, 0, 0, 1, -1986);
        i.push(0, 0, 0, 0, -32760, 0, 0, 0, 0, 510, 0, 0, 0, 0, 0, 0);

        return i;
    }
}
